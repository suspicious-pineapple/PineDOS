Building the cross compiler stuff (in cross/) is somewhat important.

C wrappers for assembly functions will be defined in asmutil/cwrappers.asm

terminal color palette is defined in colors.asm

names of various variables are found at the bottom of kernel.asm

todo: MOVe things to C. assembly is insanity



roadmap:
	- interrupts
		- asm wrapper for C interrupt functions [Done]
	- keyboard driver
		- depends on interrupts i guess
		- needs remapping of IRQs to ISRs
	- more libc functions
		- actually dont. implement syscalls instead (syscalls could begin to exist now that interrupts work)
		- libc only for userspace (maybe port newlib? doesnt seem *that* out of scope anymore)
	- bump allocator [done]
	- improve allocator
		parse multiboot memory map

	- a shell
		-> actually no shell. kernel shells bad
			do in userspace instead

	- disk driver, primitive file system (-> maybe FAT driver)
	- userspace programs somehow?
		- text editor
		- hex viewer/editor


	- multitasking (later: preemptive multitasking)
		-> actually near future goal. not that hard now that interrupts work
		-> round robin scheduler		
	
	- ???
	
	- IP/TCP stack
	- Telnet?
	- virtual memory? long mode? paging?
		-> use segmentation for now, one segment per userspace thread

	- stacktrace somehow?

	- make font less ugly	
	

conventions:
add new c files to the create-image thingy as an individual gcc command (dont forget to add the object files to the linker)
add new assembly files to the %include list in kernel32.asm

todo: use makefiles instead, ffs

calling convention is cdecl -> caller puts arguments on stack, 4 bytes for each argument, regardless of size (-> aligned)
caller is expected to clean up stack





magic numbers:





