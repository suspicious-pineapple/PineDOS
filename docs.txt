Building the cross compiler stuff (in cross/) is somewhat important.

C wrappers for assembly functions will be defined in asmutil/cwrappers.asm

terminal color palette is defined in colors.asm

names of various variables are found at the bottom of kernel.asm

todo: MOVe things to C. assembly is insanity



roadmap:
	- interrupts
		- asm wrapper for C interrupt functions [Done]
	- keyboard driver [Done-ish]

	- more libc functions
		- actually dont. implement syscalls instead (syscalls could begin to exist now that interrupts work)
		- libc only for userspace (maybe port newlib? doesnt seem *that* out of scope anymore)

	- bump allocator [done]
	- improve allocator
		- linked list of blocks
		- parse multiboot memory map

	- a shell
		-> actually no shell. kernel shells are evil
			do in userspace instead

	- disk driver, primitive file system (-> maybe FAT driver)
	- userspace programs somehow?
		- text editor
		- hex viewer/editor
		- shell

	- preemptive multitasking: [Done-ish]
		- see scheduler.c
		- save/restore segments too



	
	- ???
	- ACPI
	- IP/TCP stack
	- Telnet?
	- Intel HD audio driver?
	- virtual memory? long mode? paging?
		-> use segmentation for now, one segment per userspace thread
		-> actually dont use segmentation for now. it sucks
		-> maybe there is a reason why everyone says that paging is better

	- stacktrace somehow?

	- make font less ugly [Never]
	

conventions:
add new c files to the create-image thingy as an individual gcc command (dont forget to add the object files to the linker)
add new assembly files to the %include list in kernel32.asm

todo: use makefiles instead, ffs

calling convention is cdecl -> caller puts arguments on stack, 4 bytes for each argument, regardless of size (-> aligned)
caller is expected to clean up stack





magic numbers:
int 0x22 -> scheduler yield, defined in src/interrupts.c and interrupt_wrappers.asm




